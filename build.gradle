import edu.wpi.first.nativeutils.NativeUtils
import org.gradle.api.file.FileCollection
import org.gradle.internal.os.OperatingSystem
import edu.wpi.first.nativeutils.tasks.JNIHeaders

buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'gradle.plugin.edu.wpi.first:native-utils:1.5.2'
        classpath 'gradle.plugin.edu.wpi.first.wpilib.versioning:wpilib-version-plugin:2.0'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin'

if (!hasProperty('releaseType')) {
    WPILibVersion {
        releaseType = 'dev'
    }
}

ext.getClassifier = { binary->
    return NativeUtils.getClassifier(binary)
}

ext.getPlatformPath = { binary->
    return NativeUtils.getPlatformPath(binary)
}

ext.getJNIHeadersClass = {
    return JNIHeaders
}

apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'
apply plugin: 'java'

apply from: 'config.gradle'

test.enabled = false

dependencies {
    compile 'edu.wpi.first.wpiutil:wpiutil-java:3.+'
    compile 'edu.wpi.first.ntcore:ntcore-java:4.+'
    compile 'org.opencv:opencv-java:3.2.0'
    compile 'edu.wpi.first.cscore:cscore-java:1.+'
    compile 'edu.wpi.first.wpilibj:wpilibj-java:2018.+'
}

jar {
    baseName = 'sweep'
}

model {
    jniConfigs {
        sweepDriver(JNIConfig) {
            jniDefinitionClasses = [ "com.armabot.SweepJNI"]
            jniArmHeaderLocations = [ all: file("${rootDir}/src/arm-linux-jni") ]
            sourceSets = [ project.sourceSets.main ]
        }
    }
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '3.+'
            sharedConfigs = [ sweepDriver: [], sweep: []]
        }
        nilibraries(DependencyConfig) {
            groupId = 'edu.wpi.first.ni-libraries'
            artifactId = 'ni-libraries'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ sweepDriver: [], sweep: [] ]
        }
        hal(DependencyConfig) {
            groupId = 'edu.wpi.first.hal'
            artifactId = 'hal'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ sweepDriver: [], sweep: [] ]
        }
        ntcore(DependencyConfig) {
            groupId = 'edu.wpi.first.ntcore'
            artifactId = 'ntcore-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '4.+'
            sharedConfigs = [ sweep: [] ]
        }
        wpilibc(DependencyConfig) {
            groupId = 'edu.wpi.first.wpilibc'
            artifactId = 'wpilibc'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ sweep: [], ]
        }
    }
    components {
        sweepDriver(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs = ['src/driver/native/cpp', 'libsweep/src']
                        include '**/*.cc', '**/*.cpp'
                        excludes =  ['dummy.cc']
                    }
                    exportedHeaders {
                        srcDirs = ['libsweep/include/sweep', 'libsweep/include']
                        include '**/*.h'
                    }
                }
            }
        }
        sweep(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: "sweepDriver", linkage: 'shared'
                    source {
                        srcDirs = ['src/main/native/cpp']
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/native/include'
                    }
                }

            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}
